{"version":3,"sources":["zombiedice/entities/dice.cljs"],"mappings":";AAIA,GAAA,QAAAA,uCAAAC,gDAAAC,qDAAAC;AAAA;AAAA,AAAA,oCAAA,mFAAA,0DAAA,0DAAA,0DAAA,oDAAA,oDAAA,7YAASC;;AACT,GAAA,QAAAJ,uCAAAC,gDAAAC,qDAAAG;AAAA;AAAA,AAAA,uCAAA,mFAAA,0DAAA,0DAAA,oDAAA,oDAAA,wDAAA,9YAASC;;AACT,GAAA,QAAAN,uCAAAC,gDAAAC,qDAAAK;AAAA;AAAA,AAAA,sCAAA,mFAAA,0DAAA,oDAAA,oDAAA,wDAAA,wDAAA,3YAASC;;AAET;;;oCAAA,pCAAMC,gFAEHC;AAFH,AAGE,IAAAC,WAAMD;IAANC,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AACOP;;;KADP;AAEUE;;;KAFV;AAGSE;;;;AAHT,MAAA,KAAAK,MAAA,CAAA,mEAAAF;;;;AAKF;;;qCAAA,rCAAMG;AAAN,AAGE,OAACC,kBAAQ,AAACC,sDACA,+CAAA,IAAA,nDAACC,uGACD,+CAAA,IAAA,nDAACA,+JACD,+CAAA,IAAA,nDAACA;;AAEb;;;qCAAA,rCAAMC,kFAEHC,SAASC;AAFZ,AAGE,OAACC,mBAASD,MAAMD;;AAElB;;;qCAAA,rCAAMG,kFAEHC;AAFH,AAAA,kDAAA,yDAAA,FAGUA,wDAAQ,AAACC,mBAAS,AAACf,kCAASc;;AAEtC,sCAAA,tCAAME,oFAAYC;AAAlB,AACE,OAACC,4CAAIL,mCAAUI;;AAEjB,wCAAA,xCAAME,wFAAcF;AAApB,AACE,OAACG,+CAAO,WAAKC;AAAL,AAAQ,oDAAA,7CAACC,uGAAW,AAAA,oFAAOD;GAAKJ;;AAE1C,uCAAA,vCAAMM,sFAAaN;AAAnB,AACE,OAACO,gBAAM,AAACL,sCAAaF;;AAEvB,yCAAA,zCAAMQ,0FAAeR;AAArB,AACE,OAACG,+CAAO,WAAKC;AAAL,AAAQ,oDAAA,7CAACC,qGAAU,AAAA,oFAAOD;GAAKJ;;AAEzC,wCAAA,xCAAMS,wFAAcT;AAApB,AACE,OAACO,gBAAM,AAACC,uCAAcR;;AAExB,uCAAA,vCAAMU,sFAAaV;AAAnB,AACE,OAACG,+CAAO,WAAKC;AAAL,AAAQ,oDAAA,7CAACC,iGAAQ,AAAA,oFAAOD;GAAKJ;;AAEvC,sCAAA,tCAAMW,oFAAYX;AAAlB,AACE,OAACO,gBAAM,AAACG,qCAAYV;;AAEtB,sCAAA,tCAAMY,oFAAYZ;AAAlB,AACE,OAACC,4CAAI,WAAKJ;AAAL,AAAQ,OAAA,qFAAQA;GAAIG","names":["js/zombiedice","js/zombiedice.entities","js/zombiedice.entities.dice","js/zombiedice.entities.dice.red-dice","zombiedice.entities.dice/red-dice","js/zombiedice.entities.dice.yellow-dice","zombiedice.entities.dice/yellow-dice","js/zombiedice.entities.dice.green-dice","zombiedice.entities.dice/green-dice","zombiedice.entities.dice/get-dice","dice-color","G__16751","cljs.core/Keyword","js/Error","zombiedice.entities.dice/init-dice","cljs.core/shuffle","cljs.core.concat","cljs.core.repeat","zombiedice.entities.dice/take-dice","dice-pot","count","cljs.core/split-at","zombiedice.entities.dice/roll-dice","d","cljs.core/rand-nth","zombiedice.entities.dice/roll-dices","dices","cljs.core.map","zombiedice.entities.dice/filter-shots","cljs.core.filter","x","cljs.core._EQ_","zombiedice.entities.dice/count-shots","cljs.core/count","zombiedice.entities.dice/filter-brains","zombiedice.entities.dice/count-brains","zombiedice.entities.dice/filter-feet","zombiedice.entities.dice/count-feet","zombiedice.entities.dice/get-colors"],"sourcesContent":["(ns zombiedice.entities.dice\n  (:require\n   [cljs.core :as c]))\n\n(defonce red-dice [:shotgun :shotgun :shotgun :feet :feet :brains])\n(defonce yellow-dice [:shotgun :shotgun :feet :feet :brains :brains])\n(defonce green-dice [:shotgun :feet :feet :brains :brains :brains])\n\n(defn get-dice\n  \"Gets a dices faces by color. Can be red yellow or green\"\n  [dice-color]\n  (case dice-color\n    :red red-dice\n    :yellow yellow-dice\n    :green green-dice))\n\n(defn init-dice\n  \"There are 13 dice to start each play, 3 red, 4 yellow and 6 green. Create shuffled vector\"\n  []\n  (shuffle (concat\n            (repeat 3 :red)\n            (repeat 4 :yellow)\n            (repeat 6 :green))))\n\n(defn take-dice\n  \"Take n dices from the current dice array\"\n  [dice-pot count]\n  (split-at count dice-pot))\n\n(defn roll-dice\n  \"Return the dice color and randomly chosen face\"\n  [d]\n  {:color d :face (rand-nth (get-dice d))})\n\n(defn roll-dices [dices]\n  (map roll-dice dices))\n\n(defn filter-shots [dices]\n  (filter (fn [x] (= :shotgun (:face x))) dices))\n\n(defn count-shots [dices]\n  (count (filter-shots dices)))\n\n(defn filter-brains [dices]\n  (filter (fn [x] (= :brains (:face x))) dices))\n\n(defn count-brains [dices]\n  (count (filter-brains dices)))\n\n(defn filter-feet [dices]\n  (filter (fn [x] (= :feet (:face x))) dices))\n\n(defn count-feet [dices]\n  (count (filter-feet dices)))\n\n(defn get-colors [dices]\n  (map (fn [d] (:color d)) dices))\n"]}