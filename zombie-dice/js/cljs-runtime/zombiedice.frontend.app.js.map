{"version":3,"sources":["zombiedice/frontend/app.cljs"],"mappings":"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","names":["zombiedice.frontend.app/yield-turn!","game-state","new-game-state","cljs.core/deref","zombiedice.state.state-manager/update-player-brains","zombiedice.state.state-manager/move-current-player-to-last","zombiedice.state.state-manager/reset-throws","zombiedice.state.state-manager/update-round-counter","zombiedice.state.state_manager.add_dice","zombiedice.entities.dice/init-dice","zombiedice.state.state-manager/set-action","zombiedice.state.state-manager/save-game-state!","zombiedice.frontend.app/reset-game!","zombiedice.state.state-manager/initial-game-state","zombiedice.frontend.app/play-turn!","zombiedice.state.state-manager/process-hand","zombiedice.state.state-manager/check-hand","zombiedice.frontend.app/looser-alert-component","zombiedice.state.state-manager/get-current-player","zombiedice.frontend.app/winner-alert-component","zombiedice.frontend.app/score-board-table","players","zombiedice.state.state-manager/get-players-sorted","current-player","cljs.core/count","iter__5480__auto__","s__13351","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","b__13353","cljs.core/chunk-buffer","i__13352","map__13354","cljs.core/-nth","cljs.core/--destructure-map","cljs.core.get","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__13350","cljs.core/chunk-rest","map__13355","cljs.core/first","cljs.core/cons","cljs.core/rest","name","position","brains","is-current-player?","cljs.core._EQ_","tr-class","player-name","zombiedice.frontend.app/current-round-stats-table","throws","zombiedice.state.state-manager/get-throws","throw-totals","zombiedice.state.state-manager/get-throw-totals","s__13357","b__13359","i__13358","map__13360","iter__13356","map__13361","throw","feet","shots","cljs.core/random-uuid","zombiedice.frontend.app/update-players","new-player","zombiedice.state.state-manager/add-player","zombiedice.frontend.app/add-player-component","reagent.core.atom","p1__13362#","zombiedice.frontend.components/divider-horizontal","zombiedice.frontend.components/input","cljs.core/reset!","e","zombiedice.frontend.components/button","zombiedice.frontend.app/start-game-component","is-adding-players?","zombiedice.state.state-manager/get-players","zombiedice.state.state-manager/start-game!","zombiedice.state.state-manager/game-state","zombiedice.frontend.app/stats-component","round","zombiedice.state.state-manager/get-round","players-count","player-position","remaining-dice","zombiedice.frontend.app/current-dice-component","dices","zombiedice.state.state-manager/get-current-dice","s__13364","b__13366","i__13365","iter__13363","dice","cljs.core/name","zombiedice.frontend.app/game-ui-component","cljs.core.not_EQ_","zombiedice.state.state-manager/get-action","zombiedice.frontend.components/card","zombiedice.frontend.components/section-title","zombiedice.frontend.app/players-ui-component","zombiedice.frontend.components/section-subtitle","zombiedice.frontend.app/zombie-dice-ui","zombiedice.frontend.app/mount-root","root","reagent.dom.client/create-root","js/document","reagent.dom.client.render","zombiedice.frontend.app/start","cljs.core.prn","zombiedice.frontend.app/init","zombiedice.frontend.app/stop","cljs.core/chunk-first"],"sourcesContent":["(ns zombiedice.frontend.app\n  (:require [zombiedice.entities.dice :as dice]\n            [reagent.core :as r]\n            [reagent.dom.client :as rc]\n            [zombiedice.frontend.components :as components]\n            [zombiedice.state.state-manager :as state]\n            [cljs.core :as c]))\n\n(defn yield-turn! [game-state]\n  (let [new-game-state\n        (-> @game-state\n            (state/update-player-brains)\n            (state/move-current-player-to-last)\n            (state/reset-throws)\n            (state/update-round-counter)\n            (state/add-dice (dice/init-dice))\n            (state/set-action :in-game))]\n    (state/save-game-state! game-state new-game-state)))\n\n(defn reset-game! [game-state]\n  (let [new-game-state\n        (-> state/initial-game-state\n            (state/add-dice (dice/init-dice)))]\n    (state/save-game-state! game-state new-game-state)))\n\n(defn play-turn! [game-state]\n  (let [new-game-state\n        (-> @game-state\n            (state/process-hand)\n            (state/check-hand))]\n    (state/save-game-state! game-state new-game-state)))\n\n(defn looser-alert-component [game-state]\n  [:div\n   {:class \"bg-secondary/50 border-b border-secondary/40 text-amber-700 text-sm p-4 flex justify-between\"}\n   [:div\n    [:div.flex.items-center\n     [:span.pr-4 \"\ud83d\udca5\"]\n     [:p\n      (str (:name (state/get-current-player @game-state)) \" has been shot too many times!\")]]]])\n\n(defn winner-alert-component [game-state]\n  [:div\n   {:class \"bg-primary/50 border-b border-primary/40 text-lime-700 text-sm p-4 flex justify-between\"}\n   [:div\n    [:div.flex.items-center\n     [:span.pr-4 \"\ud83e\udddf\u200d\u2642\ufe0f\"]\n     [:p\n      (str (:name (state/get-current-player @game-state)) \" has won!\")]]]])\n\n(defn score-board-table\n  \"Render a table of players in the game with their accumulated brain\n  consumption tally\"\n  [game-state]\n  (let [players (state/get-players-sorted @game-state)\n        current-player (state/get-current-player @game-state)]\n    (if (< 0 (count players))\n      [:table {:class \"w-full caption-bottom text-sm\"}\n       [:thead {:class \"[&_tr]:border-b\"}\n        [:tr {:class \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\"}\n         [:th {:class \"h-10 px-2 text-left align-middle font-medium text-muted-foreground w-[100px]\"}\n          \"Name\"]\n         [:th {:class \"h-10 px-2 align-middle font-medium text-muted-foreground text-right\"}\n          \"Position\"]\n         [:th {:class \"h-10 px-2 align-middle font-medium text-muted-foreground text-right\"}\n          \"Rank\"]\n         [:th {:class \"h-10 px-2 align-middle font-medium text-muted-foreground text-right\"}\n          \"Brains\"]]]\n       [:tbody {:class \"[&_tr:last-child]:border-0\"}\n        (for [{:keys [name position brains]} players]\n          (let [is-current-player? (= name (:name current-player))\n                tr-class (if is-current-player? \"border-b bg-primary/10\" \"border-b\")\n                player-name (if is-current-player? (str name \" \ud83c\udfb2\") name)]\n            [:tr {:key name :class tr-class}\n             [:td {:class \"p-2 align-middle font-medium\"} player-name]\n             [:td {:class \"p-2 align-middle text-right\"} position]\n             [:td {:class \"p-2 align-middle text-right\"} 0]\n             [:td {:class \"p-2 align-middle text-right\"} brains]]))]]\n      [:table {:class \"w-full caption-bottom text-sm\"}\n       [:tbody {:class \"[&_tr:last-child]:border-0\"}\n        [:tr {:class \"border-b\"}\n         [:td \"No players - add between 2 and 5 to start\"]]]])))\n\n(defn current-round-stats-table [game-state]\n  (let [throws (state/get-throws game-state)\n        throw-totals (state/get-throw-totals @game-state)]\n    [:table {:class \"w-full caption-bottom text-sm\"}\n     [:thead {:class \"[&_tr]:border-b\"}\n      [:tr {:class \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\"}\n       [:th {:class \"h-10 px-2 text-left align-middle font-medium text-muted-foreground w-[100px]\"}\n        \"Throw\"]\n       [:th {:class \"h-10 px-2 align-middle font-medium text-muted-foreground text-right\"}\n        \"Feet\"]\n       [:th {:class \"h-10 px-2 align-middle font-medium text-muted-foreground text-right\"}\n        \"Shotguns\"]\n       [:th {:class \"h-10 px-2 align-middle font-medium text-muted-foreground text-right\"}\n        \"Brains\"]]]\n     [:tbody {:class \"[&_tr:last-child]:border-0\"}\n      (for [{:keys [throw feet shots brains]} throws]\n        ^{:key (random-uuid)} [:tr {:class \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\"}\n                               [:td {:class \"p-2 align-middle font-medium\"} throw]\n                               [:td {:class \"p-2 align-middle text-right\"} feet]\n                               [:td {:class \"p-2 align-middle text-right\"} shots]\n                               [:td {:class \"p-2 align-middle text-right\"} brains]])]\n     [:tfoot {:class \"border-t bg-primary/10 font-medium [&>tr]:last:border-b-0\"}\n      [:tr {:class \"border-b\"}\n       [:td {:class \"p-2 align-middle\"} \"Total\"]\n       [:td {:class \"p-2 align-middle text-right\"} (:feet throw-totals)]\n       [:td {:class \"p-2 align-middle text-right\"} (:shots throw-totals)]\n       [:td {:class \"p-2 align-middle text-right\"} (:brains throw-totals)]]]]))\n\n(defn update-players [game-state new-player]\n  (let [new-game-state\n        (state/add-player @game-state @new-player)]\n    (state/save-game-state! game-state new-game-state)))\n\n(defn add-player-component\n  [game-state]\n  (let [name (r/atom \"\")]\n    (fn []\n      (when (= (:action @game-state) :adding-players)\n        [:<>\n         [components/divider-horizontal]\n         [:div\n          {:class \"grid grid-flow-col grid-rows-1 gap-4\"}\n          [components/input {:placeholder \"Player name\"\n                             :value @name\n                             :on-change #(reset! name (-> % .-target .-value))\n                             :on-key-press\n                             (fn [e]\n                               (when (= (.-key e) \"Enter\")\n                                 (update-players game-state name)\n                                 (reset! name \"\")))}]\n          [components/button {:label \"Add\"\n                              :variant :primary\n                              :on-click\n                              (fn []\n                                (update-players game-state name)\n                                (reset! name \"\"))}]]]))))\n\n(defn start-game-component\n  [game-state]\n  (let [is-adding-players? (= (:action @game-state) :adding-players)]\n    [components/button {:label (if is-adding-players? \"Start game\" \"Restart game\")\n                        :full-width true\n                        :disabled (< (count (state/get-players @game-state)) 2)\n                        :on-click #(if is-adding-players? (state/start-game! game-state) (reset-game! state/game-state))}]))\n\n(defn stats-component\n  [game-state]\n  (let [round (state/get-round @game-state)\n        players-count (count (state/get-players @game-state))\n        current-player (state/get-current-player @game-state)\n        player-position (:position current-player)\n        remaining-dice (count (:remaining-dice @game-state))]\n    [:div\n     {:class \"grid grid-cols-2 grid-rows-2 gap-0\"}\n     [:div\n      {:class \"relative z-30 flex flex-1 flex-col justify-center gap-1 border-t rounded-tl-lg border-primary text-left even:border sm:border sm:px-4 sm:py-2\"}\n      [:span\n       {:class \"text-xs text-gray-600\"} \"Round\"]\n      [:span\n       {:class \"text-lg font-bold leading-none sm:text-lg text-center\"} round]]\n     [:div\n      {:class \"relative z-30 flex flex-1 flex-col justify-center gap-1 border-t rounded-tr-lg border-primary text-left sm:border sm:border-l-0 sm:px-4 sm:py-2\"}\n      [:span\n       {:class \"text-xs text-gray-600\"} \"Turn\"]\n      [:span\n       {:class \"text-lg font-bold leading-none sm:text-lg text-center\"} (str player-position \" of \" players-count)]]\n     [:div\n      {:class \"relative z-30 flex flex-1 flex-col justify-center gap-1 border-t rounded-bl-lg border-primary text-left sm:border sm:border-t-0 sm:px-4 sm:py-2\"}\n      [:span\n       {:class \"text-xs text-gray-600\"} \"Throw\"]\n      [:span\n       {:class \"text-lg font-bold leading-none sm:text-lg text-center\"} (count (:throws @game-state))]]\n     [:div\n      {:class \"relative z-30 flex flex-1 flex-col justify-center gap-1 border-t rounded-br-lg border-primary text-left sm:border sm:border-t-0 sm:border-l-0 sm:px-4 sm:py-2\"}\n      [:span\n       {:class \"text-xs text-gray-600\"} \"Dice remaining\"]\n      [:span\n       {:class \"text-lg font-bold leading-none sm:text-lg text-center\"} remaining-dice]]]))\n\n(defn current-dice-component [game-state]\n  (let [dices (state/get-current-dice @game-state)]\n    [:div {:class \"flex justify-center gap-4 text-4xl\"}\n     (for [dice dices]\n       ^{:key (random-uuid)} [:img {:src (str \"/images/dice-\" (name (:color dice)) \"-\" (name (:face dice)) \".png\")\n                                    :alt \"Descriptive text\"\n                                    :style {:width \"80px\"\n                                            :height \"auto\"}}])]))\n\n(defn game-ui-component [game-state]\n  (when (not= (state/get-action game-state) :adding-players)\n    [:<>\n     [stats-component game-state]\n\n     (let [player-name (:name (state/get-current-player @game-state) \"n/a\")]\n       [components/card\n        [:<>\n         [components/section-title (str \"Current zombie - \" player-name)]\n         [current-round-stats-table game-state]]])\n\n     [components/card\n      [:<>\n       [components/section-title \"Dice rolled\"]\n       [current-dice-component game-state]]]\n\n     (when (= (state/get-action game-state) :turn-over)\n       [looser-alert-component game-state])\n\n     (when (= (state/get-action game-state) :game-over)\n       [winner-alert-component game-state])\n\n     [:div {:class \"flex flex-col sm:flex-row gap-2 justify-around\"}\n      [components/button {:label \"Roll dice\"\n                          :variant :primary\n                          :disabled (or (= (:action @game-state) :turn-over) (<= (count (:remaining-dice @game-state)) 0) (= (state/get-action game-state) :game-over))\n                          :on-click #(play-turn! game-state)}]\n      [components/button {:label \"Yield turn\"\n                          :variant :outline\n                          :disabled (= (state/get-action game-state) :game-over)\n                          :on-click #(yield-turn! game-state)}]]]))\n\n(defn players-ui-component [game-state]\n  [components/card\n   [:<>\n    [components/section-title \"Score board\"]\n    [components/section-subtitle \"The first to eat at least 13 brains wins the game\"]\n    [score-board-table game-state]\n    [add-player-component game-state]]])\n\n(defn zombie-dice-ui [game-state]\n  [:div {:class \"p-4 space-y-4 max-w-md mx-auto\"}\n   [:h1 {:class \"text-xl font-bold text-center\"} \"Zombie Dice\"]\n   [players-ui-component game-state]\n   [start-game-component game-state]\n   [game-ui-component game-state]])\n\n(defn mount-root []\n  (let [root (rc/create-root (.getElementById js/document \"root\"))]\n    (rc/render root (zombie-dice-ui state/game-state))))\n\n;; start is called by init and after code reloading finishes\n(defn ^:dev/after-load start []\n  (prn \"Zombie Dice starting\")\n  (reset-game! state/game-state)\n  (mount-root))\n\n(defn init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (start))\n\n;; this is called before any code is reloaded\n(defn ^:dev/before-load stop []\n  (prn \"stop\"))\n"]}